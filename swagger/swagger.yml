swagger: "2.0"
info:
  title: yuedan API
  description: Document of APIs
  version: 1.0.0
  contact:
    email: 46937922@qq.com
basePath: /v1
paths:
  /token/:
    get:
      tags:
      - token
      description: get Token
      operationId: TokenController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply
          to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Token'
        "403": {}
    post:
      tags:
      - token
      description: create Token
      operationId: TokenController.Post
      parameters:
      - in: body
        name: body
        description: body for Token content
        required: true
        schema:
          $ref: '#/definitions/models.Token'
      responses:
        "201":
          description: '{int} models.Token'
        "403":
          description: body is empty
  /token/{id}:
    get:
      tags:
      - token
      description: get Token by id
      operationId: TokenController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          schema:
            $ref: '#/definitions/models.Token'
        "403":
          description: :id is empty
    delete:
      tags:
      - token
      description: delete the Token
      operationId: TokenController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /user/:
    post:
      tags:
      - user
      description: user register
      operationId: UserController.register
      parameters:
      - in: body
        name: StudentId
        description: student id
        required: true
        type: string
      - in: body
        name: StudentPassword
        description: student password
        required: true
        type: string
      - in: body
        name: Phone
        description: phone
        required: true
        type: string
      - in: body
        name: School
        description: school name
        required: true
        type: string
      responses:
        error:
          description: '{ "Status": 1, "Error": "参数错误", "Data": "用户已存在", "PageSize":
            0, "PageIndex": 0, "TotalPage": 0, "TotalCount": 0 }'
        success:
          description: '{ "Status": 0, "Error": "", "Data": "成功", "PageSize": 0, "PageIndex":
            0, "TotalPage": 0, "TotalCount": 0 }'
  /user/details:
    get:
      tags:
      - user
      description: Get User Details
      operationId: UserController.Get User Details
      parameters:
      - in: header
        name: token
        description: user token
        required: true
        schema:
          $ref: '#/definitions/.String'
      responses:
        error:
          description: '{ "Status": 1, "Error": "权限错误", "Data": "用户未登录", "PageSize":
            0, "PageIndex": 0, "TotalPage": 0, "TotalCount": 0 }'
        success:
          description: '{ "Status": 0, "Error": "", "Data": { "Id": 2, "StudentId":
            "1253024", "StudentPassword": "", "Password": "", "Phone": "13761463756",
            "Photo": "", "Nickname": "", "RealName": "", "Sex": "", "Birth": "0001-01-01T00:00:00Z",
            "Email": "", "School": "同济大学", "SchoolPart": "", "College": "", "Dormitory":
            "", "Specialty": "", "Education": "", "SchoolYear": "", "Identity": "",
            "Hobby": "", "IsSingle": "", "AncestralHome": "", "Lvl": 0, "Exp": 0,
            "UserType": 1 }, "PageSize": 0, "PageIndex": 0, "TotalPage": 0, "TotalCount":
            0 }'
  /user/login:
    post:
      tags:
      - user
      description: user login
      operationId: UserController.login
      parameters:
      - in: body
        name: StudentId
        description: student id
        required: true
        type: string
      - in: body
        name: Password
        description: password
        required: true
        type: string
      responses:
        error:
          description: '{ "Status": 1, "Error": "权限错误", "Data": "账号或密码错误", "PageSize":
            0, "PageIndex": 0, "TotalPage": 0, "TotalCount": 0 }'
        success:
          description: '{ "Status": 0, "Error": "", "Data": "c0b7a6dd-552c-482e-b569-bcca89de5146",
            "PageSize": 0, "PageIndex": 0, "TotalPage": 0, "TotalCount": 0 }'
  /user/update:
    post:
      tags:
      - user
      description: update user
      operationId: UserController.update user
      parameters:
      - in: header
        name: token
        description: user token
        required: true
        schema:
          $ref: '#/definitions/.String'
      - in: body
        name: Photo
        description: Photo
        type: string
      - in: body
        name: Nickname
        description: Nickname
        type: string
      - in: body
        name: Password
        description: Password
        type: string
      - in: body
        name: RealName
        description: RealName
        type: string
      - in: body
        name: Sex
        description: Sex
        type: string
      - in: body
        name: Birth
        description: Birth
        type: string
      - in: body
        name: Email
        description: Email
        type: string
      - in: body
        name: SchoolPart
        description: SchoolPart
        type: string
      - in: body
        name: College
        description: College
        type: string
      - in: body
        name: Specialty
        description: Specialty
        type: string
      - in: body
        name: Dormitory
        description: Dormitory
        type: string
      - in: body
        name: Education
        description: Education
        type: string
      - in: body
        name: SchoolYear
        description: SchoolYear
        type: string
      - in: body
        name: Identity
        description: Identity
        type: string
      - in: body
        name: Hobby
        description: Hobby
        type: string
      - in: body
        name: IsSingle
        description: IsSingle
        type: string
      - in: body
        name: AncestralHome
        description: AncestralHome
        type: string
      responses:
        error:
          description: '{ "Status": 1, "Error": "权限错误", "Data": "用户未登录", "PageSize":
            0, "PageIndex": 0, "TotalPage": 0, "TotalCount": 0 }'
        success:
          description: '{ "Status": 0, "Error": "", "Data": { "Id": 2, "StudentId":
            "1253024", "StudentPassword": "", "Password": "", "Phone": "13761463756",
            "Photo": "gggg", "Nickname": "大潘", "RealName": "潘瑞峰", "Sex": "F", "Birth":
            "1993-10-22T00:00:00+08:00", "Email": "123@QQ.COM", "School": "同济大学",
            "SchoolPart": "嘉定校区", "College": "软件学院", "Dormitory": "16号楼", "Specialty":
            "软件工程", "Education": "硕士", "SchoolYear": "2016", "Identity": "学生", "Hobby":
            "无", "IsSingle": "Y", "AncestralHome": "上海", "Lvl": 0, "Exp": 0, "UserType":
            1 }, "PageSize": 0, "PageIndex": 0, "TotalPage": 0, "TotalCount": 0 }'
definitions:
  .String:
    type: object
  models.Token:
    title: Token
    type: object
    properties:
      Id:
        type: integer
        format: int64
      LoginDate:
        type: string
        format: string
      TokenStr:
        type: string
      UserId:
        $ref: '#/definitions/models.User'
      UserType:
        type: integer
        format: int32
  models.User:
    title: User
    type: object
    properties:
      AncestralHome:
        type: string
      Birth:
        type: string
        format: string
      College:
        type: string
      Dormitory:
        type: string
      Education:
        type: string
      Email:
        type: string
      Exp:
        type: integer
        format: int64
      Hobby:
        type: string
      Id:
        type: integer
        format: int64
      Identity:
        type: string
      IsSingle:
        type: string
      Lvl:
        type: integer
        format: int64
      Nickname:
        type: string
      Password:
        type: string
      Phone:
        type: string
      Photo:
        type: string
      RealName:
        type: string
      School:
        type: string
      SchoolPart:
        type: string
      SchoolYear:
        type: string
      Sex:
        type: string
      Specialty:
        type: string
      StudentId:
        type: string
      StudentPassword:
        type: string
      UserType:
        type: integer
        format: int32
tags:
- name: user
  description: |
    UserController operations for User
- name: token
  description: |
    TokenController operations for Token
